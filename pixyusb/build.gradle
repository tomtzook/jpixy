plugins {
	id 'java-library'
    id 'maven-publish'
    id 'signing'
}

apply from: rootProject.file('extras.gradle')

group GROUP
version VERSION

sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

dependencies {
}

jar {
    archiveBaseName.set('pixy')

    archiveFileName.set("${archiveBaseName.get()}.${archiveExtension.get()}")
    destinationDirectory.set(project.buildDir)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveBaseName.set(project.name)
    archiveClassifier.set('sources')

    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName.set(project.name)
    archiveClassifier.set('javadoc')

    from javadoc.destinationDir
}

apply from: rootProject.file('cmake.gradle')

tasks.clean.dependsOn tasks.deleteBuildDirectory
tasks.build.dependsOn tasks.buildNatives

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'jpixy'
                description = 'Pixy port for Java'
                url = 'https://github.com/tomtzook/jpixy'

                licenses {
                    license {
                        name = 'Apache License 2.0'
                        url = ' http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                developers {
                    developer {
                        id = 'tomtzook'
                        name = 'Tom Tzook'
                        email = 'tomtzook@gmail.com'
                    }
                }

                scm {
                    developerConnection = 'scm:git:ssh://github.com/tomtzook/jpixy.git'
                    connection = 'https://github.com/tomtzook/jpixy'
                }
            }
        }
    }

    repositories {
        maven {
            if (isReleaseBuild()) {
                name = 'NexusStaging'
                url = NEXUS_RELEASE_REPOSITORY_URL
            } else {
                name = 'NexusSnapshot'
                url = NEXUS_SNAPSHOT_REPOSITORY_URL
            }

            credentials {
                username getNexusUsername()
                password getNexusPassword()
            }
        }
    }
}

if (shouldSign()) {
    signing {
        sign publishing.publications.mavenJava
    }
}
